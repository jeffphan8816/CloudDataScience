
global:
  kibanaEnabled: true

extraVolumeMounts:
  - name: empty-dir
    mountPath: /bitnami/elasticsearch
    subPath: app-volume-dir

initScripts:
  init_aws-keys.sh: |
    #!/bin/bash
    AWS_ACCESS_KEY_ID=AKIASFGAJIWFNPGLGBRI
    AWS_SECRET_ACCESS_KEY=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
    echo $AWS_ACCESS_KEY_ID | /opt/bitnami/elasticsearch/bin/elasticsearch-keystore add --stdin --force s3.client.default.access_key
    echo $AWS_SECRET_ACCESS_KEY | /opt/bitnami/elasticsearch/bin/elasticsearch-keystore add --stdin --force s3.client.default.secret_key

master:
  masterOnly: false
  replicaCount: 2
  resources: 
    requests:
      memory: "2Gi"
    limits:
      memory: "2Gi"
  persistence:
    size: "20Gi"
  nodeSelector:
    workload: elasticsearch

data:
  replicaCount: 0
coordinating:
  replicaCount: 0
ingest:
  replicaCount: 0

security:
  enabled: true
  # PASSWORD must be the same value passed to elasticsearch to get an "out of the box" experience
  elasticPassword: "cloudcomp"
  tls:
    restEncryption: true
    # AutoGenerate TLS certs for elastic
    autoGenerated: true

kibana:
  elasticsearch:
    security:
      auth:
        enabled: true
        # default in the elasticsearch chart is elastic
        kibanaUsername: "kibana_system"
        kibanaPassword: "cloudcomp"
      tls:
        # Instruct kibana to connect to elastic over https
        enabled: true
        # Bit of a catch 22, as you will need to know the name upfront of your release
        existingSecret: elasticsearch-master-crt # or just 'elasticsearch-coordinating-crt' if the release name happens to be 'elasticsearch'
        # As the certs are auto-generated, they are pemCerts so set to true
        usePemCerts: true
